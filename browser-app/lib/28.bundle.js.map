{"version":3,"sources":["webpack:///../node_modules/@theia/filesystem/src/browser/download/file-download-command-contribution.ts","webpack:///../node_modules/@theia/filesystem/src/browser/download/file-download-frontend-module.ts","webpack:///../node_modules/@theia/filesystem/src/common/filesystem.ts"],"names":[],"mappings":"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","file":"28.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { notEmpty } from '@theia/core/lib/common/objects';\nimport { UriSelection } from '@theia/core/lib/common/selection';\nimport { SelectionService } from '@theia/core/lib/common/selection-service';\nimport { Command, CommandContribution, CommandRegistry } from '@theia/core/lib/common/command';\nimport { UriAwareCommandHandler, UriCommandHandler } from '@theia/core/lib/common/uri-command-handler';\nimport { FileDownloadService } from './file-download-service';\n\n@injectable()\nexport class FileDownloadCommandContribution implements CommandContribution {\n\n    @inject(FileDownloadService)\n    protected readonly downloadService: FileDownloadService;\n\n    @inject(SelectionService)\n    protected readonly selectionService: SelectionService;\n\n    registerCommands(registry: CommandRegistry): void {\n        const handler = new UriAwareCommandHandler<URI[]>(this.selectionService, this.downloadHandler(), { multi: true });\n        registry.registerCommand(FileDownloadCommands.DOWNLOAD, handler);\n    }\n\n    protected downloadHandler(): UriCommandHandler<URI[]> {\n        return {\n            execute: uris => this.executeDownload(uris),\n            isEnabled: uris => this.isDownloadEnabled(uris),\n            isVisible: uris => this.isDownloadVisible(uris),\n        };\n    }\n\n    protected async executeDownload(uris: URI[]): Promise<void> {\n        this.downloadService.download(uris);\n    }\n\n    protected isDownloadEnabled(uris: URI[]): boolean {\n        return uris.length > 0 && uris.every(u => u.scheme === 'file');\n    }\n\n    protected isDownloadVisible(uris: URI[]): boolean {\n        return this.isDownloadEnabled(uris);\n    }\n\n    protected getUris(uri: Object | undefined): URI[] {\n        if (uri === undefined) {\n            return [];\n        }\n        return (Array.isArray(uri) ? uri : [uri]).map(u => this.getUri(u)).filter(notEmpty);\n    }\n\n    protected getUri(uri: Object | undefined): URI | undefined {\n        if (uri instanceof URI) {\n            return uri;\n        }\n        if (UriSelection.is(uri)) {\n            return uri.uri;\n        }\n        return undefined;\n    }\n\n}\n\nexport namespace FileDownloadCommands {\n\n    export const DOWNLOAD: Command = {\n        id: 'file.download'\n    };\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule } from 'inversify';\nimport { CommandContribution } from '@theia/core/lib/common/command';\nimport { FileDownloadService } from './file-download-service';\nimport { FileDownloadCommandContribution } from './file-download-command-contribution';\n\nexport default new ContainerModule(bind => {\n    bind(FileDownloadService).toSelf().inSingletonScope();\n    bind(CommandContribution).to(FileDownloadCommandContribution).inSingletonScope();\n});\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { TextDocumentContentChangeEvent } from 'vscode-languageserver-types';\nimport { JsonRpcServer, ApplicationError } from '@theia/core/lib/common';\nimport { injectable } from 'inversify';\nexport const fileSystemPath = '/services/filesystem';\n\nexport const FileSystem = Symbol('FileSystem');\n\nexport interface FileSystem extends JsonRpcServer<FileSystemClient> {\n\n    /**\n     * Returns the file stat for the given URI.\n     *\n     * If the uri points to a folder it will contain one level of unresolved children.\n     *\n     * `undefined` if a file for the given URI does not exist.\n     */\n    getFileStat(uri: string): Promise<FileStat | undefined>;\n\n    /**\n     * Finds out if a file identified by the resource exists.\n     */\n    exists(uri: string): Promise<boolean>;\n\n    /**\n     * Resolve the contents of a file identified by the resource.\n     */\n    resolveContent(uri: string, options?: { encoding?: string }): Promise<{ stat: FileStat, content: string }>;\n\n    /**\n     * Updates the content replacing its previous value.\n     */\n    setContent(file: FileStat, content: string, options?: { encoding?: string }): Promise<FileStat>;\n\n    /**\n     * Updates the content replacing its previous value.\n     */\n    updateContent(file: FileStat, contentChanges: TextDocumentContentChangeEvent[], options?: { encoding?: string }): Promise<FileStat>;\n\n    /**\n     * Moves the file to a new path identified by the resource.\n     *\n     * The optional parameter overwrite can be set to replace an existing file at the location.\n     *\n     * |           | missing | file | empty dir |    dir    |\n     * |-----------|---------|------|-----------|-----------|\n     * | missing   |    x    |   x  |     x     |     x     |\n     * | file      |    ✓    |   x  |     x     |     x     |\n     * | empty dir |    ✓    |   x  |     x     | overwrite |\n     * | dir       |    ✓    |   x  | overwrite | overwrite |\n     *\n     */\n    move(sourceUri: string, targetUri: string, options?: FileMoveOptions): Promise<FileStat>;\n\n    /**\n     * Copies the file to a path identified by the resource.\n     *\n     * The optional parameter overwrite can be set to replace an existing file at the location.\n     */\n    copy(sourceUri: string, targetUri: string, options?: { overwrite?: boolean, recursive?: boolean }): Promise<FileStat>;\n\n    /**\n     * Creates a new file with the given path. The returned promise\n     * will have the stat model object as a result.\n     *\n     * The optional parameter content can be used as value to fill into the new file.\n     */\n    createFile(uri: string, options?: { content?: string, encoding?: string }): Promise<FileStat>;\n\n    /**\n     * Creates a new folder with the given path. The returned promise\n     * will have the stat model object as a result.\n     */\n    createFolder(uri: string): Promise<FileStat>;\n\n    /**\n     * Creates a new empty file if the given path does not exist and otherwise\n     * will set the mtime and atime of the file to the current date.\n     */\n    touchFile(uri: string): Promise<FileStat>;\n\n    /**\n     * Deletes the provided file. The optional moveToTrash parameter allows to\n     * move the file to trash.\n     */\n    delete(uri: string, options?: FileDeleteOptions): Promise<void>;\n\n    /**\n     * Returns the encoding of the given file resource.\n     */\n    getEncoding(uri: string): Promise<string>;\n\n    /**\n     * Return list of available roots.\n     */\n    getRoots(): Promise<FileStat[]>;\n\n    /**\n     * Returns a promise that resolves to a file stat representing the current user's home directory.\n     */\n    getCurrentUserHome(): Promise<FileStat | undefined>;\n\n    /**\n     * Resolves to an array of URIs pointing to the available drives on the filesystem.\n     */\n    getDrives(): Promise<string[]>;\n\n    /**\n     * Tests a user's permissions for the file or directory specified by URI.\n     * The mode argument is an optional integer that specifies the accessibility checks to be performed.\n     * Check `FileAccess.Constants` for possible values of mode.\n     * It is possible to create a mask consisting of the bitwise `OR` of two or more values (e.g. FileAccess.Constants.W_OK | FileAccess.Constants.R_OK).\n     * If `mode` is not defined, `FileAccess.Constants.F_OK` will be used instead.\n     */\n    access(uri: string, mode?: number): Promise<boolean>\n\n    /**\n     * Returns the path of the given file URI, specific to the backend's operating system.\n     * If the URI is not a file URI, undefined is returned.\n     *\n     * USE WITH CAUTION: You should always prefer URIs to paths if possible, as they are\n     * portable and platform independent. Pathes should only be used in cases you directly\n     * interact with the OS, e.g. when running a command on the shell.\n     */\n    getFsPath(uri: string): Promise<string | undefined>\n}\n\nexport namespace FileAccess {\n\n    export namespace Constants {\n\n        /**\n         * Flag indicating that the file is visible to the calling process.\n         * This is useful for determining if a file exists, but says nothing about rwx permissions. Default if no mode is specified.\n         */\n        export const F_OK: number = 0;\n\n        /**\n         * Flag indicating that the file can be read by the calling process.\n         */\n        export const R_OK: number = 4;\n\n        /**\n         * Flag indicating that the file can be written by the calling process.\n         */\n        export const W_OK: number = 2;\n\n        /**\n         * Flag indicating that the file can be executed by the calling process.\n         * This has no effect on Windows (will behave like `FileAccess.F_OK`).\n         */\n        export const X_OK: number = 1;\n\n    }\n\n}\n\nexport interface FileMoveOptions {\n    overwrite?: boolean;\n}\n\nexport interface FileDeleteOptions {\n    moveToTrash?: boolean\n}\n\n/**\n * A callback type, called when we try to save a file but realize it has been\n * modified by somebody else since we have opened it.  `originalStat` is the\n * stat at the moment we opened the file, `currentStat` is the stat at the\n * moment we try to save it (after the external modification).  The callback\n * should return true if we still want to save the file, false otherwise.\n */\nexport const FileShouldOverwrite = Symbol('FileShouldOverwrite');\nexport interface FileShouldOverwrite {\n    (originalStat: FileStat, currentStat: FileStat): Promise<boolean>;\n}\n\nexport interface FileSystemClient {\n\n    /**\n     * Tests whether the given file can be overwritten\n     * in the case if it is out of sync with the given file stat.\n     */\n    shouldOverwrite: FileShouldOverwrite;\n\n    onDidMove(sourceUri: string, targetUri: string): void;\n\n}\n\n@injectable()\nexport class DispatchingFileSystemClient implements FileSystemClient {\n\n    readonly clients = new Set<FileSystemClient>();\n\n    shouldOverwrite(originalStat: FileStat, currentStat: FileStat): Promise<boolean> {\n        return Promise.race([...this.clients].map(client =>\n            client.shouldOverwrite(originalStat, currentStat))\n        );\n    }\n\n    onDidMove(sourceUri: string, targetUri: string): void {\n        this.clients.forEach(client => client.onDidMove(sourceUri, targetUri));\n    }\n\n}\n\n/**\n * A file resource with meta information.\n */\nexport interface FileStat {\n\n    /**\n     * The URI of the file.\n     */\n    uri: string;\n\n    /**\n     * The last modification of this file.\n     */\n    lastModification: number;\n\n    /**\n     * `true` if the resource is a directory. Otherwise, `false`.\n     */\n    isDirectory: boolean;\n\n    /**\n     * The children of the file stat.\n     * If it is `undefined` and `isDirectory` is `true`, then this file stat is unresolved.\n     */\n    children?: FileStat[];\n\n    /**\n     * The size of the file if known.\n     */\n    size?: number;\n\n}\n\nexport namespace FileStat {\n    export function is(candidate: object): candidate is FileStat {\n        return candidate.hasOwnProperty('uri')\n            && candidate.hasOwnProperty('lastModification')\n            && candidate.hasOwnProperty('isDirectory');\n    }\n\n    export function equals(one: object | undefined, other: object | undefined): boolean {\n        if (!one || !other || !is(one) || !is(other)) {\n            return false;\n        }\n        return one.uri === other.uri\n            && one.lastModification === other.lastModification\n            && one.isDirectory === other.isDirectory;\n    }\n}\n\nexport namespace FileSystemError {\n    export const FileNotFound = ApplicationError.declare(-33000, (uri: string, prefix?: string) => ({\n        message: `${prefix ? prefix + ' ' : ''}'${uri}' has not been found.`,\n        data: { uri }\n    }));\n    export const FileExists = ApplicationError.declare(-33001, (uri: string, prefix?: string) => ({\n        message: `${prefix ? prefix + ' ' : ''}'${uri}' already exists.`,\n        data: { uri }\n    }));\n    export const FileIsDirectory = ApplicationError.declare(-33002, (uri: string, prefix?: string) => ({\n        message: `${prefix ? prefix + ' ' : ''}'${uri}' is a directory.`,\n        data: { uri }\n    }));\n    export const FileNotDirectory = ApplicationError.declare(-33003, (uri: string, prefix?: string) => ({\n        message: `${prefix ? prefix + ' ' : ''}'${uri}' is not a directory.`,\n        data: { uri }\n    }));\n    export const FileIsOutOfSync = ApplicationError.declare(-33004, (file: FileStat, stat: FileStat) => ({\n        message: `'${file.uri}' is out of sync.`,\n        data: { file, stat }\n    }));\n}\n"],"sourceRoot":""}