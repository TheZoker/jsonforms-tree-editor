{"version":3,"sources":["webpack:///../node_modules/@theia/preferences/src/browser/abstract-resource-preference-provider.ts","webpack:///../node_modules/@theia/preferences/src/browser/preference-frontend-module.ts","webpack:///../node_modules/@theia/preferences/src/browser/preference-tree-container.ts","webpack:///../node_modules/@theia/preferences/src/browser/preferences-contribution.ts","webpack:///../node_modules/@theia/preferences/src/browser/preferences-decorator-service.ts","webpack:///../node_modules/@theia/preferences/src/browser/preferences-decorator.ts","webpack:///../node_modules/@theia/preferences/src/browser/preferences-frontend-application-contribution.ts","webpack:///../node_modules/@theia/preferences/src/browser/preferences-menu-factory.ts","webpack:///../node_modules/@theia/preferences/src/browser/preferences-monaco-contribution.ts","webpack:///../node_modules/@theia/preferences/src/browser/preferences-tree-widget.ts","webpack:///../node_modules/@theia/preferences/src/browser/user-preference-provider.ts","webpack:///../node_modules/@theia/preferences/src/browser/workspace-preference-provider.ts","webpack:///../node_modules/@theia/userstorage/src/browser/index.ts"],"names":[],"mappings":"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","file":"22.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable, postConstruct } from 'inversify';\nimport * as jsoncparser from 'jsonc-parser';\nimport URI from '@theia/core/lib/common/uri';\nimport { ILogger, Resource, ResourceProvider, MaybePromise, MessageService } from '@theia/core';\nimport { PreferenceProvider } from '@theia/core/lib/browser/preferences';\n\n@injectable()\nexport abstract class AbstractResourcePreferenceProvider extends PreferenceProvider {\n\n    // tslint:disable-next-line:no-any\n    protected preferences: { [key: string]: any } = {};\n\n    @inject(ILogger) protected readonly logger: ILogger;\n\n    @inject(ResourceProvider) protected readonly resourceProvider: ResourceProvider;\n\n    @inject(MessageService) protected readonly messageService: MessageService;\n\n    protected resource: Promise<Resource>;\n\n    @postConstruct()\n    protected async init(): Promise<void> {\n        const uri = await this.getUri();\n\n        // In case if no workspace is opened there are no workspace settings.\n        // There is nothing to contribute to preferences and we just skip it.\n        if (!uri) {\n            this._ready.resolve();\n            return;\n        }\n        this.resource = this.resourceProvider(uri);\n\n        // Try to read the initial content of the preferences.  The provider\n        // becomes ready even if we fail reading the preferences, so we don't\n        // hang the preference service.\n        this.readPreferences()\n            .then(() => this._ready.resolve())\n            .catch(() => this._ready.resolve());\n\n        const resource = await this.resource;\n        this.toDispose.push(resource);\n        if (resource.onDidChangeContents) {\n            this.toDispose.push(resource.onDidChangeContents(content => this.readPreferences()));\n        }\n    }\n\n    abstract getUri(): MaybePromise<URI | undefined>;\n\n    // tslint:disable-next-line:no-any\n    getPreferences(): { [key: string]: any } {\n        return this.preferences;\n    }\n\n    // tslint:disable-next-line:no-any\n    async setPreference(key: string, value: any): Promise<void> {\n        const resource = await this.resource;\n        if (resource.saveContents) {\n            const content = await this.readContents();\n            const formattingOptions = { tabSize: 3, insertSpaces: true, eol: '' };\n            try {\n                const edits = jsoncparser.modify(content, [key], value, { formattingOptions });\n                const result = jsoncparser.applyEdits(content, edits);\n\n                await resource.saveContents(result);\n            } catch (e) {\n                const message = `Failed to update the value of ${key}.`;\n                this.messageService.error(`${message} Please check if ${resource.uri.toString()} is corrupted.`);\n                this.logger.error(`${message} ${e.toString()}`);\n                return;\n            }\n            this.preferences[key] = value;\n            this.onDidPreferencesChangedEmitter.fire(undefined);\n        }\n    }\n\n    protected async readPreferences(): Promise<void> {\n        const newContent = await this.readContents();\n        const strippedContent = jsoncparser.stripComments(newContent);\n        this.preferences = jsoncparser.parse(strippedContent) || {};\n        this.onDidPreferencesChangedEmitter.fire(undefined);\n    }\n\n    protected async readContents(): Promise<string> {\n        try {\n            const resource = await this.resource;\n            return await resource.readContents();\n        } catch {\n            return '';\n        }\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule, interfaces, } from 'inversify';\nimport { PreferenceProvider, PreferenceScope } from '@theia/core/lib/browser/preferences';\nimport { UserPreferenceProvider } from './user-preference-provider';\nimport { WorkspacePreferenceProvider } from './workspace-preference-provider';\nimport { bindViewContribution, WidgetFactory, FrontendApplicationContribution } from '@theia/core/lib/browser';\nimport { PreferencesContribution } from './preferences-contribution';\nimport { createPreferencesTreeWidget } from './preference-tree-container';\nimport { PreferencesMenuFactory } from './preferences-menu-factory';\nimport { PreferencesContainer, PreferencesEditorsContainer, PreferencesTreeWidget } from './preferences-tree-widget';\nimport { PreferencesFrontendApplicationContribution } from './preferences-frontend-application-contribution';\n\nimport './preferences-monaco-contribution';\n\nexport function bindPreferences(bind: interfaces.Bind, unbind: interfaces.Unbind): void {\n    unbind(PreferenceProvider);\n\n    bind(PreferenceProvider).to(UserPreferenceProvider).inSingletonScope().whenTargetNamed(PreferenceScope.User);\n    bind(PreferenceProvider).to(WorkspacePreferenceProvider).inSingletonScope().whenTargetNamed(PreferenceScope.Workspace);\n\n    bindViewContribution(bind, PreferencesContribution);\n\n    bind(PreferencesContainer).toSelf();\n    bind(WidgetFactory).toDynamicValue(({ container }) => ({\n        id: PreferencesContainer.ID,\n        createWidget: () => container.get(PreferencesContainer)\n    }));\n\n    bind(WidgetFactory).toDynamicValue(({ container }) => ({\n        id: PreferencesTreeWidget.ID,\n        createWidget: () => createPreferencesTreeWidget(container)\n    })).inSingletonScope();\n\n    bind(PreferencesEditorsContainer).toSelf();\n    bind(WidgetFactory).toDynamicValue(({ container }) => ({\n        id: PreferencesEditorsContainer.ID,\n        createWidget: () => container.get(PreferencesEditorsContainer)\n    }));\n\n    bind(PreferencesMenuFactory).toSelf();\n    bind(FrontendApplicationContribution).to(PreferencesFrontendApplicationContribution).inSingletonScope();\n}\n\nexport default new ContainerModule((bind, unbind, isBound, rebind) => {\n    bindPreferences(bind, unbind);\n});\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { interfaces } from 'inversify';\nimport { PreferencesDecorator } from './preferences-decorator';\nimport { PreferencesDecoratorService } from './preferences-decorator-service';\nimport {\n    createTreeContainer,\n    defaultTreeProps,\n    TreeDecoratorService,\n    TreeProps,\n    TreeWidget\n} from '@theia/core/lib/browser';\nimport { PreferencesTreeWidget } from './preferences-tree-widget';\n\nexport function createPreferencesTreeWidget(parent: interfaces.Container): PreferencesTreeWidget {\n    const child = createTreeContainer(parent);\n\n    child.bind(PreferencesTreeWidget).toSelf();\n    child.rebind(TreeProps).toConstantValue({ ...defaultTreeProps, search: true });\n    child.rebind(TreeWidget).toService(PreferencesTreeWidget);\n\n    bindPreferencesDecorator(child);\n\n    return child.get(PreferencesTreeWidget);\n}\n\nfunction bindPreferencesDecorator(parent: interfaces.Container): void {\n    parent.bind(PreferencesDecorator).toSelf().inSingletonScope();\n    parent.bind(PreferencesDecoratorService).toSelf().inSingletonScope();\n    parent.rebind(TreeDecoratorService).toService(PreferencesDecoratorService);\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject, named } from 'inversify';\nimport { MenuModelRegistry, CommandRegistry } from '@theia/core';\nimport {\n    CommonMenus,\n    PreferenceScope,\n    PreferenceProvider,\n    AbstractViewContribution,\n    CommonCommands,\n    KeybindingRegistry\n} from '@theia/core/lib/browser';\nimport { WorkspacePreferenceProvider } from './workspace-preference-provider';\nimport { FileSystem } from '@theia/filesystem/lib/common';\nimport { UserStorageService } from '@theia/userstorage/lib/browser';\nimport { PreferencesContainer } from './preferences-tree-widget';\nimport { EditorManager } from '@theia/editor/lib/browser';\n\n@injectable()\nexport class PreferencesContribution extends AbstractViewContribution<PreferencesContainer> {\n\n    @inject(UserStorageService) protected readonly userStorageService: UserStorageService;\n    @inject(PreferenceProvider) @named(PreferenceScope.Workspace) protected readonly workspacePreferenceProvider: WorkspacePreferenceProvider;\n    @inject(FileSystem) protected readonly filesystem: FileSystem;\n    @inject(EditorManager) protected readonly editorManager: EditorManager;\n\n    constructor() {\n        super({\n            widgetId: PreferencesContainer.ID,\n            widgetName: 'Preferences',\n            defaultWidgetOptions: { area: 'main' }\n        });\n    }\n\n    async registerCommands(commands: CommandRegistry): Promise<void> {\n        commands.registerCommand(CommonCommands.OPEN_PREFERENCES, {\n            isEnabled: () => true,\n            execute: (preferenceScope = PreferenceScope.User) => this.openPreferences(preferenceScope)\n        });\n    }\n\n    registerMenus(menus: MenuModelRegistry): void {\n        menus.registerMenuAction(CommonMenus.FILE_SETTINGS_SUBMENU_OPEN, {\n            commandId: CommonCommands.OPEN_PREFERENCES.id,\n            order: 'a10'\n        });\n    }\n\n    registerKeybindings(keybindings: KeybindingRegistry): void {\n        keybindings.registerKeybinding({\n            command: CommonCommands.OPEN_PREFERENCES.id,\n            keybinding: 'ctrl+,'\n        });\n    }\n\n    protected async openPreferences(preferenceScope: PreferenceScope): Promise<void> {\n        const wsUri = await this.workspacePreferenceProvider.getUri();\n        if (wsUri && !await this.filesystem.exists(wsUri.toString())) {\n            await this.filesystem.createFile(wsUri.toString());\n        }\n\n        const widget = await this.widget;\n        widget.preferenceScope = preferenceScope;\n        super.openView({ activate: true });\n        widget.activatePreferenceEditor(preferenceScope);\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport { AbstractTreeDecoratorService } from '@theia/core/lib/browser/tree/tree-decorator';\nimport { PreferencesDecorator } from './preferences-decorator';\n\n@injectable()\nexport class PreferencesDecoratorService extends AbstractTreeDecoratorService {\n\n    constructor(@inject(PreferencesDecorator) protected readonly preferencesTreeDecorator: PreferencesDecorator) {\n        super([preferencesTreeDecorator]);\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport { Tree, TreeDecorator, TreeDecoration, PreferenceProperty, PreferenceService } from '@theia/core/lib/browser';\nimport { Emitter, Event, MaybePromise } from '@theia/core';\n\n@injectable()\nexport class PreferencesDecorator implements TreeDecorator {\n    readonly id: string = 'theia-preferences-decorator';\n\n    protected preferences: { [id: string]: PreferenceProperty }[];\n    protected preferencesDecorations: Map<string, TreeDecoration.Data>;\n\n    protected readonly emitter: Emitter<(tree: Tree) => Map<string, TreeDecoration.Data>> = new Emitter();\n\n    constructor(@inject(PreferenceService) private readonly preferencesService: PreferenceService) {\n        this.preferencesDecorations = new Map();\n        this.preferencesService.onPreferenceChanged(() => {\n            this.fireDidChangeDecorations(this.preferences);\n        });\n    }\n\n    get onDidChangeDecorations(): Event<(tree: Tree) => Map<string, TreeDecoration.Data>> {\n        return this.emitter.event;\n    }\n\n    fireDidChangeDecorations(preferences: {[id: string]: PreferenceProperty}[]): void {\n        if (!this.preferences) {\n            this.preferences = preferences;\n        }\n        this.preferencesDecorations = new Map(preferences.map(m => {\n            const preferenceName = Object.keys(m)[0];\n            const preferenceValue = m[preferenceName];\n            const storedValue = this.preferencesService.get(preferenceName);\n            return [preferenceName, {\n                tooltip: preferenceValue.description,\n                captionSuffixes: [\n                    {\n                        data: storedValue !== undefined ? ': ' + storedValue : preferenceValue.default !== undefined ? ': ' + preferenceValue.default : undefined,\n                    },\n                    {\n                        data: ' ' + preferenceValue.description,\n                        fontData: {color: 'var(--theia-ui-font-color2)'}\n                    }]\n            }] as [string, TreeDecoration.Data];\n        }));\n        this.emitter.fire(() => this.preferencesDecorations);\n    }\n\n    decorations(tree: Tree): MaybePromise<Map<string, TreeDecoration.Data>> {\n        return this.preferencesDecorations;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { FrontendApplicationContribution, PreferenceSchemaProvider } from '@theia/core/lib/browser';\nimport { inject, injectable } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { InMemoryResources } from '@theia/core';\nimport { JsonSchemaStore } from '@theia/core/lib/browser/json-schema-store';\nimport { USER_PREFERENCE_URI } from './user-preference-provider';\n\n@injectable()\nexport class PreferencesFrontendApplicationContribution implements FrontendApplicationContribution {\n\n    @inject(JsonSchemaStore) jsonSchemaStore: JsonSchemaStore;\n    @inject(PreferenceSchemaProvider) schemaProvider: PreferenceSchemaProvider;\n    @inject(InMemoryResources) inmemoryResources: InMemoryResources;\n\n    onStart() {\n        this.schemaProvider.ready.then(async () => {\n            const schema = this.schemaProvider.getCombinedSchema();\n            const uri = new URI('vscode://schemas/settings/user');\n            this.inmemoryResources.add(uri, JSON.stringify(schema));\n            this.jsonSchemaStore.registerSchema({\n                fileMatch: ['.theia/settings.json', USER_PREFERENCE_URI.toString()],\n                url: uri.toString()\n            });\n        });\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable } from 'inversify';\nimport { Menu } from '@phosphor/widgets';\nimport { CommandRegistry } from '@phosphor/commands';\nimport { PreferenceProperty } from '@theia/core/lib/browser';\n\n@injectable()\nexport class PreferencesMenuFactory {\n\n    // tslint:disable-next-line:no-any\n    createPreferenceContextMenu(id: string, savedPreference: any, property: PreferenceProperty, execute: (property: string, value: any) => void): Menu {\n        const commands = new CommandRegistry();\n        const menu = new Menu({ commands });\n        if (property) {\n            const enumConst = property.enum;\n            if (enumConst) {\n                enumConst.forEach(enumValue => {\n                    const commandId = id + '-' + enumValue;\n                    if (!commands.hasCommand(commandId)) {\n                        commands.addCommand(commandId, {\n                            label: enumValue,\n                            iconClass: savedPreference === enumValue || !savedPreference && property.default === enumValue ? 'fa fa-check' : '',\n                            execute: () => execute(id, enumValue)\n                        });\n                        menu.addItem({\n                            type: 'command',\n                            command: commandId\n                        });\n                    }\n                });\n            } else if (property.type && property.type === 'boolean') {\n                const commandTrue = id + '-true';\n                commands.addCommand(commandTrue, {\n                    label: 'true',\n                    iconClass: savedPreference === true || savedPreference === 'true' || savedPreference === undefined && property.default === true ? 'fa fa-check' : '',\n                    execute: () => execute(id, true)\n                });\n                menu.addItem({\n                    type: 'command',\n                    command: commandTrue\n                });\n\n                const commandFalse = id + '-false';\n                commands.addCommand(commandFalse, {\n                    label: 'false',\n                    iconClass: savedPreference === false || savedPreference === 'false' || savedPreference === undefined && property.default === false ? 'fa fa-check' : '',\n                    execute: () => execute(id, false)\n                });\n                menu.addItem({\n                    type: 'command',\n                    command: commandFalse\n                });\n            } else {\n                const commandId = id + '-stringValue';\n                commands.addCommand(commandId, {\n                    label: 'Add Value',\n                    execute: () => execute(id, property.default ? property.default : '')\n                });\n                menu.addItem({\n                    type: 'command',\n                    command: commandId\n                });\n            }\n        }\n        return menu;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nmonaco.languages.register({\n    id: 'jsonc',\n    'aliases': [\n        'JSON with Comments'\n    ],\n    'filenames': [\n        'settings.json'\n    ]\n});\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, postConstruct, named, injectable } from 'inversify';\nimport { Message } from '@phosphor/messaging';\nimport { PreferencesMenuFactory } from './preferences-menu-factory';\nimport { PreferencesDecorator } from './preferences-decorator';\nimport { toArray } from '@phosphor/algorithm';\nimport { BoxPanel, DockPanel, SplitPanel, Widget } from '@phosphor/widgets';\nimport {\n    ApplicationShell,\n    ContextMenuRenderer,\n    ExpandableTreeNode,\n    PreferenceProperty,\n    PreferenceSchemaProvider,\n    PreferenceScope,\n    PreferenceService,\n    Saveable,\n    SelectableTreeNode,\n    TreeModel,\n    TreeNode,\n    TreeProps,\n    TreeWidget,\n    WidgetManager,\n    PreferenceProvider\n} from '@theia/core/lib/browser';\nimport { UserPreferenceProvider } from './user-preference-provider';\nimport { WorkspacePreferenceProvider } from './workspace-preference-provider';\nimport { DisposableCollection, Emitter, Event, MessageService } from '@theia/core';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\nimport { EditorWidget, EditorManager } from '@theia/editor/lib/browser';\nimport { FileSystem, FileSystemUtils } from '@theia/filesystem/lib/common';\nimport { UserStorageUri, THEIA_USER_STORAGE_FOLDER } from '@theia/userstorage/lib/browser';\nimport URI from '@theia/core/lib/common/uri';\n\nexport interface PreferencesEditorWidget extends EditorWidget {\n    scope?: PreferenceScope;\n}\n\n@injectable()\nexport class PreferencesContainer extends SplitPanel implements ApplicationShell.TrackableWidgetProvider, Saveable {\n\n    static ID = 'preferences_container_widget';\n\n    protected treeWidget: PreferencesTreeWidget | undefined;\n    protected editorsContainer: PreferencesEditorsContainer;\n    private currentEditor: EditorWidget | undefined;\n    private readonly editors: EditorWidget[] = [];\n    private deferredEditors = new Deferred<EditorWidget[]>();\n\n    protected readonly onDirtyChangedEmitter = new Emitter<void>();\n    readonly onDirtyChanged: Event<void> = this.onDirtyChangedEmitter.event;\n\n    protected readonly toDispose = new DisposableCollection();\n\n    @inject(WidgetManager)\n    protected readonly widgetManager: WidgetManager;\n\n    @inject(ApplicationShell)\n    protected readonly shell: ApplicationShell;\n\n    @inject(MessageService)\n    protected readonly messageService: MessageService;\n\n    @inject(PreferenceService)\n    protected readonly preferenceService: PreferenceService;\n\n    protected _preferenceScope: PreferenceScope = PreferenceScope.User;\n\n    @postConstruct()\n    protected init(): void {\n        this.id = PreferencesContainer.ID;\n        this.title.label = 'Preferences';\n        this.title.caption = this.title.label;\n        this.title.closable = true;\n        this.title.iconClass = 'fa fa-sliders';\n\n        this.toDispose.push(this.onDirtyChangedEmitter);\n    }\n\n    dispose(): void {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this.toDispose.dispose();\n    }\n\n    get autoSave(): 'on' | 'off' {\n        return this.editors.some(editor => editor.saveable.autoSave === 'on') ? 'on' : 'off';\n    }\n\n    get dirty(): boolean {\n        return this.editors.some(editor => editor.saveable.dirty);\n    }\n\n    save(): void {\n        this.editors.forEach(editor => editor.saveable.save());\n    }\n\n    getTrackableWidgets(): Promise<Widget[]> {\n        return this.deferredEditors.promise;\n    }\n\n    get preferenceScope(): PreferenceScope {\n        return this._preferenceScope;\n    }\n\n    set preferenceScope(preferenceScope: PreferenceScope) {\n        this._preferenceScope = preferenceScope;\n    }\n\n    protected async onAfterAttach(msg: Message): Promise<void> {\n        if (this.widgets.length > 0) {\n            return;\n        }\n\n        this.treeWidget = await this.widgetManager.getOrCreateWidget<PreferencesTreeWidget>(PreferencesTreeWidget.ID);\n        this.treeWidget.onPreferenceSelected(value => {\n            const preferenceName = Object.keys(value)[0];\n            const preferenceValue = value[preferenceName];\n            if (this.dirty) {\n                this.messageService.warn('Preferences editor(s) has/have unsaved changes');\n            } else if (this.currentEditor) {\n                this.preferenceService.set(preferenceName,\n                    preferenceValue,\n                    this.currentEditor.title.label === 'User Preferences'\n                        ? PreferenceScope.User\n                        : PreferenceScope.Workspace);\n            }\n        });\n\n        this.editorsContainer = await this.widgetManager.getOrCreateWidget<PreferencesEditorsContainer>(PreferencesEditorsContainer.ID);\n        this.toDispose.push(this.editorsContainer);\n        this.editorsContainer.activatePreferenceEditor(this.preferenceScope);\n        this.editorsContainer.onInit(() => {\n            toArray(this.editorsContainer.widgets()).forEach(editor => {\n                const editorWidget = editor as EditorWidget;\n                this.editors.push(editorWidget);\n                const savable = editorWidget.saveable;\n                savable.onDirtyChanged(() => {\n                    this.onDirtyChangedEmitter.fire(undefined);\n                });\n            });\n            this.deferredEditors.resolve(this.editors);\n        });\n        this.editorsContainer.onEditorChanged(editor => {\n            if (this.currentEditor && this.currentEditor.editor.uri.toString() !== editor.editor.uri.toString()) {\n                this.currentEditor.saveable.save();\n            }\n            this.currentEditor = editor;\n        });\n\n        const treePanel = new BoxPanel();\n        treePanel.addWidget(this.treeWidget);\n        this.addWidget(treePanel);\n        this.addWidget(this.editorsContainer);\n        this.treeWidget.activate();\n        super.onAfterAttach(msg);\n    }\n\n    protected onActivateRequest(msg: Message): void {\n        if (this.currentEditor) {\n            this.currentEditor.activate();\n        }\n        super.onActivateRequest(msg);\n    }\n\n    protected onCloseRequest(msg: Message) {\n        if (this.treeWidget) {\n            this.treeWidget.close();\n        }\n        this.editorsContainer.close();\n        super.onCloseRequest(msg);\n        this.dispose();\n    }\n\n    public activatePreferenceEditor(preferenceScope: PreferenceScope) {\n        if (this.editorsContainer) {\n            this.editorsContainer.activatePreferenceEditor(preferenceScope);\n        }\n    }\n}\n\n@injectable()\nexport class PreferencesEditorsContainer extends DockPanel {\n\n    static ID = 'preferences_editors_container';\n\n    @inject(FileSystem)\n    protected readonly fileSystem: FileSystem;\n\n    @inject(EditorManager)\n    protected readonly editorManager: EditorManager;\n\n    @inject(PreferenceProvider) @named(PreferenceScope.User)\n    protected readonly userPreferenceProvider: UserPreferenceProvider;\n\n    @inject(PreferenceProvider) @named(PreferenceScope.Workspace)\n    protected readonly workspacePreferenceProvider: WorkspacePreferenceProvider;\n\n    private preferenceScope: PreferenceScope;\n\n    private readonly onInitEmitter = new Emitter<void>();\n    readonly onInit: Event<void> = this.onInitEmitter.event;\n\n    private readonly onEditorChangedEmitter = new Emitter<EditorWidget>();\n    readonly onEditorChanged: Event<EditorWidget> = this.onEditorChangedEmitter.event;\n\n    protected readonly toDispose = new DisposableCollection(\n        this.onEditorChangedEmitter,\n        this.onInitEmitter\n    );\n\n    dispose(): void {\n        this.toDispose.dispose();\n        super.dispose();\n    }\n\n    onCloseRequest(msg: Message) {\n        toArray(this.widgets()).forEach(widget => widget.close());\n        super.onCloseRequest(msg);\n    }\n\n    onUpdateRequest(msg: Message) {\n        this.onEditorChangedEmitter.fire(this.selectedWidgets().next() as EditorWidget);\n\n        super.onUpdateRequest(msg);\n    }\n\n    protected async onAfterAttach(msg: Message): Promise<void> {\n        const userPreferenceUri = this.userPreferenceProvider.getUri();\n        const userPreferences = await this.editorManager.getOrCreateByUri(userPreferenceUri) as PreferencesEditorWidget;\n        userPreferences.title.label = 'User Preferences';\n        userPreferences.title.caption = await this.getPreferenceEditorCaption(userPreferenceUri);\n        userPreferences.scope = PreferenceScope.User;\n        this.addWidget(userPreferences);\n\n        const workspacePreferenceUri = await this.workspacePreferenceProvider.getUri();\n        const workspacePreferences = workspacePreferenceUri && await this.editorManager.getOrCreateByUri(workspacePreferenceUri) as PreferencesEditorWidget;\n\n        if (workspacePreferences) {\n            workspacePreferences.title.label = 'Workspace Preferences';\n            workspacePreferences.title.caption = await this.getPreferenceEditorCaption(workspacePreferenceUri!);\n            workspacePreferences.scope = PreferenceScope.Workspace;\n            this.addWidget(workspacePreferences);\n        }\n\n        this.activatePreferenceEditor(this.preferenceScope);\n        super.onAfterAttach(msg);\n        this.onInitEmitter.fire(undefined);\n    }\n\n    activatePreferenceEditor(preferenceScope: PreferenceScope) {\n        this.preferenceScope = preferenceScope;\n        for (const widget of toArray(this.widgets())) {\n            const preferenceEditor = widget as PreferencesEditorWidget;\n            if (preferenceEditor.scope === preferenceScope) {\n                this.activateWidget(widget);\n                break;\n            }\n        }\n    }\n\n    private async getPreferenceEditorCaption(preferenceUri: URI): Promise<string> {\n        const homeStat = await this.fileSystem.getCurrentUserHome();\n        const homeUri = homeStat ? new URI(homeStat.uri) : undefined;\n\n        let uri = preferenceUri;\n        if (preferenceUri.scheme === UserStorageUri.SCHEME && homeUri) {\n            uri = homeUri.resolve(THEIA_USER_STORAGE_FOLDER).resolve(preferenceUri.withoutScheme().path);\n        }\n        return homeUri\n            ? FileSystemUtils.tildifyPath(uri.path.toString(), homeUri.withoutScheme().toString())\n            : uri.path.toString();\n    }\n}\n\n@injectable()\nexport class PreferencesTreeWidget extends TreeWidget {\n\n    static ID = 'preferences_tree_widget';\n\n    private preferencesGroupNames: string[] = [];\n    private readonly properties: { [name: string]: PreferenceProperty };\n    private readonly onPreferenceSelectedEmitter: Emitter<{ [key: string]: string }>;\n    readonly onPreferenceSelected: Event<{ [key: string]: string }>;\n\n    protected readonly toDispose: DisposableCollection;\n\n    @inject(PreferencesMenuFactory) protected readonly preferencesMenuFactory: PreferencesMenuFactory;\n    @inject(PreferenceService) protected readonly preferenceService: PreferenceService;\n    @inject(PreferencesDecorator) protected readonly decorator: PreferencesDecorator;\n\n    protected constructor(\n        @inject(TreeModel) readonly model: TreeModel,\n        @inject(TreeProps) protected readonly treeProps: TreeProps,\n        @inject(ContextMenuRenderer) protected readonly contextMenuRenderer: ContextMenuRenderer,\n        @inject(PreferenceSchemaProvider) protected readonly preferenceSchemaProvider: PreferenceSchemaProvider\n    ) {\n        super(treeProps, model, contextMenuRenderer);\n\n        this.onPreferenceSelectedEmitter = new Emitter<{ [key: string]: string }>();\n        this.onPreferenceSelected = this.onPreferenceSelectedEmitter.event;\n        this.toDispose = new DisposableCollection();\n        this.toDispose.push(this.onPreferenceSelectedEmitter);\n\n        this.id = PreferencesTreeWidget.ID;\n\n        this.properties = this.preferenceSchemaProvider.getCombinedSchema().properties;\n        for (const property in this.properties) {\n            if (property) {\n                const group: string = property.substring(0, property.indexOf('.'));\n                if (this.preferencesGroupNames.indexOf(group) < 0) {\n                    this.preferencesGroupNames.push(group);\n                }\n            }\n        }\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n        super.dispose();\n    }\n\n    protected onAfterAttach(msg: Message): void {\n        this.initializeModel();\n        super.onAfterAttach(msg);\n    }\n\n    protected handleContextMenuEvent(node: TreeNode | undefined, event: React.MouseEvent<HTMLElement>): void {\n        super.handleContextMenuEvent(node, event);\n        if ((<ExpandableTreeNode>node).expanded === undefined) {\n            this.openContextMenu(node, event.nativeEvent.x, event.nativeEvent.y);\n        }\n    }\n\n    protected handleClickEvent(node: TreeNode | undefined, event: React.MouseEvent<HTMLElement>): void {\n        super.handleClickEvent(node, event);\n        if ((<ExpandableTreeNode>node).expanded === undefined) {\n            this.openContextMenu(node, event.nativeEvent.x, event.nativeEvent.y);\n        }\n    }\n\n    protected handleEnter(event: KeyboardEvent): void {\n        super.handleEnter(event);\n        const node: TreeNode = this.model.selectedNodes[0];\n        if ((<ExpandableTreeNode>node).expanded === undefined) {\n            if (node) {\n                const nodeElement = document.getElementById(node.id);\n                if (nodeElement) {\n                    const position = nodeElement.getBoundingClientRect();\n                    this.openContextMenu(this.model.selectedNodes[0], position.left, position.bottom);\n                }\n            }\n        }\n    }\n\n    private openContextMenu(node: TreeNode | undefined, positionX: number, positionY: number): void {\n        if (node && SelectableTreeNode.is(node)) {\n            const contextMenu = this.preferencesMenuFactory.createPreferenceContextMenu(\n                node.id,\n                this.preferenceService.get(node.id),\n                this.properties[node.id],\n                (property, value) => {\n                    this.onPreferenceSelectedEmitter.fire({ [property]: value });\n                }\n            );\n            contextMenu.aboutToClose.connect(() => {\n                this.activate();\n            });\n            contextMenu.activeItem = contextMenu.items[0];\n            contextMenu.open(positionX, positionY);\n        }\n    }\n\n    protected initializeModel(): void {\n        type GroupNode = SelectableTreeNode & ExpandableTreeNode;\n        const preferencesGroups: GroupNode[] = [];\n        const root: ExpandableTreeNode = {\n            id: 'root-node-id',\n            name: 'Apply the preference to selected preferences file',\n            parent: undefined,\n            visible: true,\n            children: preferencesGroups,\n            expanded: true,\n        };\n        const nodes: { [id: string]: PreferenceProperty }[] = [];\n        for (const group of this.preferencesGroupNames.sort((a, b) => a.localeCompare(b))) {\n            const propertyNodes: SelectableTreeNode[] = [];\n            const properties: string[] = [];\n            for (const property in this.properties) {\n                if (property.startsWith(group)) {\n                    properties.push(property);\n                }\n            }\n            const preferencesGroup: GroupNode = {\n                id: group + '-id',\n                name: group.toLocaleUpperCase().substring(0, 1) + group.substring(1) + ' (' + properties.length + ')',\n                visible: true,\n                parent: root,\n                children: propertyNodes,\n                expanded: false,\n                selected: false\n            };\n            properties.sort((a, b) => a.localeCompare(b));\n            properties.forEach(property => {\n                const node: SelectableTreeNode = {\n                    id: property,\n                    name: property.substring(property.indexOf('.') + 1),\n                    parent: preferencesGroup,\n                    visible: true,\n                    selected: false\n                };\n                propertyNodes.push(node);\n                nodes.push({ [property]: this.properties[property] });\n            });\n            preferencesGroups.push(preferencesGroup);\n        }\n        this.decorator.fireDidChangeDecorations(nodes);\n        this.model.root = root;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { AbstractResourcePreferenceProvider } from './abstract-resource-preference-provider';\nimport { UserStorageUri } from '@theia/userstorage/lib/browser';\n\nexport const USER_PREFERENCE_URI = new URI().withScheme(UserStorageUri.SCHEME).withPath('settings.json');\n@injectable()\nexport class UserPreferenceProvider extends AbstractResourcePreferenceProvider {\n\n    getUri() {\n        return USER_PREFERENCE_URI;\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';\nimport { AbstractResourcePreferenceProvider } from './abstract-resource-preference-provider';\n\n@injectable()\nexport class WorkspacePreferenceProvider extends AbstractResourcePreferenceProvider {\n\n    @inject(WorkspaceService)\n    protected readonly workspaceService: WorkspaceService;\n\n    async getUri(): Promise<URI | undefined> {\n        const workspaceFolder = (await this.workspaceService.roots)[0];\n        if (workspaceFolder) {\n            const rootUri = new URI(workspaceFolder.uri);\n            return rootUri.resolve('.theia').resolve('settings.json');\n        }\n        return undefined;\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport * from './user-storage-service';\nexport * from './user-storage-resource';\nexport * from './user-storage-uri';\nexport * from './user-storage-service-filesystem';\nexport * from './user-storage-frontend-module';\n"],"sourceRoot":""}