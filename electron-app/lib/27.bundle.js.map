{"version":3,"sources":["webpack:///../node_modules/@theia/core/src/electron-browser/menu/electron-context-menu-renderer.ts","webpack:///../node_modules/@theia/core/src/electron-browser/menu/electron-main-menu-factory.ts","webpack:///../node_modules/@theia/core/src/electron-browser/menu/electron-menu-contribution.ts","webpack:///../node_modules/@theia/core/src/electron-browser/menu/electron-menu-module.ts"],"names":[],"mappings":"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","file":"27.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport { MenuPath } from '../../common';\nimport { ContextMenuRenderer, Anchor } from '../../browser';\nimport { ElectronMainMenuFactory } from './electron-main-menu-factory';\n\n@injectable()\nexport class ElectronContextMenuRenderer implements ContextMenuRenderer {\n\n    constructor(@inject(ElectronMainMenuFactory) private menuFactory: ElectronMainMenuFactory) {\n    }\n\n    render(menuPath: MenuPath, anchor: Anchor, onHide?: () => void): void {\n        const menu = this.menuFactory.createContextMenu(menuPath);\n        menu.popup({});\n        if (onHide) {\n            onHide();\n        }\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport * as electron from 'electron';\nimport { inject, injectable } from 'inversify';\nimport {\n    CommandRegistry, isOSX, ActionMenuNode, CompositeMenuNode,\n    MAIN_MENU_BAR, MenuModelRegistry, MenuPath\n} from '../../common';\nimport { PreferenceService, KeybindingRegistry, Keybinding, KeyCode, Key } from '../../browser';\n\n@injectable()\nexport class ElectronMainMenuFactory {\n\n    protected _menu: Electron.Menu;\n    protected _toggledCommands: Set<string> = new Set();\n\n    constructor(\n        @inject(CommandRegistry) protected readonly commandRegistry: CommandRegistry,\n        @inject(PreferenceService) protected readonly preferencesService: PreferenceService,\n        @inject(MenuModelRegistry) protected readonly menuProvider: MenuModelRegistry,\n        @inject(KeybindingRegistry) protected readonly keybindingRegistry: KeybindingRegistry\n    ) {\n        this.preferencesService.onPreferenceChanged(() => {\n            for (const item of this._toggledCommands) {\n                this._menu.getMenuItemById(item).checked = this.commandRegistry.isToggled(item);\n                electron.remote.getCurrentWindow().setMenu(this._menu);\n            }\n        });\n    }\n\n    createMenuBar(): Electron.Menu {\n        const menuModel = this.menuProvider.getMenu(MAIN_MENU_BAR);\n        const template = this.fillMenuTemplate([], menuModel);\n        if (isOSX) {\n            template.unshift(this.createOSXMenu());\n        }\n        const menu = electron.remote.Menu.buildFromTemplate(template);\n        this._menu = menu;\n        return menu;\n    }\n\n    createContextMenu(menuPath: MenuPath): Electron.Menu {\n        const menuModel = this.menuProvider.getMenu(menuPath);\n        const template = this.fillMenuTemplate([], menuModel);\n\n        return electron.remote.Menu.buildFromTemplate(template);\n    }\n\n    protected fillMenuTemplate(items: Electron.MenuItemConstructorOptions[], menuModel: CompositeMenuNode): Electron.MenuItemConstructorOptions[] {\n        for (const menu of menuModel.children) {\n            if (menu instanceof CompositeMenuNode) {\n                if (menu.children.length > 0) {\n                    // do not render empty nodes\n\n                    if (menu.isSubmenu) { // submenu node\n\n                        const submenu = this.fillMenuTemplate([], menu);\n                        if (submenu.length === 0) {\n                            continue;\n                        }\n\n                        items.push({\n                            label: menu.label,\n                            submenu\n                        });\n\n                    } else { // group node\n\n                        // process children\n                        const submenu = this.fillMenuTemplate([], menu);\n                        if (submenu.length === 0) {\n                            continue;\n                        }\n\n                        if (items.length > 0) {\n                            // do not put a separator above the first group\n\n                            items.push({\n                                type: 'separator'\n                            });\n                        }\n\n                        // render children\n                        items.push(...submenu);\n                    }\n                }\n            } else if (menu instanceof ActionMenuNode) {\n                const commandId = menu.action.commandId;\n\n                // That is only a sanity check at application startup.\n                if (!this.commandRegistry.getCommand(commandId)) {\n                    throw new Error(`Unknown command with ID: ${commandId}.`);\n                }\n\n                if (!this.commandRegistry.isVisible(commandId)) {\n                    continue;\n                }\n\n                const bindings = this.keybindingRegistry.getKeybindingsForCommand(commandId);\n\n                let accelerator;\n\n                /* Only consider the first keybinding. */\n                if (bindings.length > 0) {\n                    const binding = bindings[0];\n                    accelerator = this.acceleratorFor(binding);\n                }\n\n                items.push({\n                    id: menu.id,\n                    label: menu.label,\n                    type: this.commandRegistry.getToggledHandler(commandId) ? 'checkbox' : 'normal',\n                    checked: this.commandRegistry.isToggled(commandId),\n                    enabled: true, // https://github.com/theia-ide/theia/issues/446\n                    visible: true,\n                    click: () => this.execute(commandId),\n                    accelerator\n                });\n                if (this.commandRegistry.getToggledHandler(commandId)) {\n                    this._toggledCommands.add(commandId);\n                }\n            }\n        }\n        return items;\n    }\n\n    /**\n     * Return a user visible representation of a keybinding.\n     */\n    protected acceleratorFor(keybinding: Keybinding) {\n        const keyCodesString = keybinding.keybinding.split(' ');\n        let result = '';\n        // FIXME see https://github.com/electron/electron/issues/11740\n        // Key Sequences can't be represented properly in the electron menu.\n        //\n        // We can do what VS Code does, and append the chords as a suffix to the menu label.\n        // https://github.com/theia-ide/theia/issues/1199#issuecomment-430909480\n        if (keyCodesString.length > 1) {\n            return result;\n        }\n\n        const keyCodeString = keyCodesString[0];\n        const keyCode = KeyCode.parse(keyCodeString);\n        let previous = false;\n        const separator = '+';\n\n        if (keyCode.meta && isOSX) {\n            if (isOSX) {\n                result += 'Cmd';\n                previous = true;\n            }\n        }\n\n        if (keyCode.ctrl) {\n            if (previous) {\n                result += separator;\n            }\n            result += 'Ctrl';\n            previous = true;\n        }\n\n        if (keyCode.alt) {\n            if (previous) {\n                result += separator;\n            }\n            result += 'Alt';\n            previous = true;\n        }\n\n        if (keyCode.shift) {\n            if (previous) {\n                result += separator;\n            }\n            result += 'Shift';\n            previous = true;\n        }\n\n        if (keyCode.key) {\n            if (previous) {\n                result += separator;\n            }\n\n            result += Key.getEasyKey(keyCode.key).easyString;\n        }\n\n        return result;\n    }\n\n    protected async execute(command: string): Promise<void> {\n        try {\n            // This is workaround for https://github.com/theia-ide/theia/issues/446.\n            // Electron menus do not update based on the `isEnabled`, `isVisible` property of the command.\n            // We need to check if we can execute it.\n            if (this.commandRegistry.isEnabled(command)) {\n                await this.commandRegistry.executeCommand(command);\n                if (this.commandRegistry.isVisible(command)) {\n                    this._menu.getMenuItemById(command).checked = this.commandRegistry.isToggled(command);\n                    electron.remote.getCurrentWindow().setMenu(this._menu);\n                }\n            }\n        } catch {\n            // no-op\n        }\n    }\n\n    protected createOSXMenu(): Electron.MenuItemConstructorOptions {\n        return {\n            label: 'Theia',\n            submenu: [\n                {\n                    role: 'about'\n                },\n                {\n                    type: 'separator'\n                },\n                {\n                    role: 'services',\n                    submenu: []\n                },\n                {\n                    type: 'separator'\n                },\n                {\n                    role: 'hide'\n                },\n                {\n                    role: 'hideothers'\n                },\n                {\n                    role: 'unhide'\n                },\n                {\n                    type: 'separator'\n                },\n                {\n                    role: 'quit'\n                }\n            ]\n        };\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport * as electron from 'electron';\nimport { inject, injectable } from 'inversify';\nimport {\n    Command, CommandContribution, CommandRegistry,\n    isOSX, MenuModelRegistry, MenuContribution\n} from '../../common';\nimport { KeybindingContribution, KeybindingRegistry } from '../../browser';\nimport { FrontendApplication, FrontendApplicationContribution, CommonMenus } from '../../browser';\nimport { ElectronMainMenuFactory } from './electron-main-menu-factory';\n\nexport namespace ElectronCommands {\n    export const TOGGLE_DEVELOPER_TOOLS: Command = {\n        id: 'theia.toggleDevTools',\n        label: 'Toggle Developer Tools'\n    };\n    export const RELOAD: Command = {\n        id: 'view.reload',\n        label: 'Reload Window'\n    };\n    export const ZOOM_IN: Command = {\n        id: 'view.zoomIn',\n        label: 'Zoom In'\n    };\n    export const ZOOM_OUT: Command = {\n        id: 'view.zoomOut',\n        label: 'Zoom Out'\n    };\n    export const RESET_ZOOM: Command = {\n        id: 'view.resetZoom',\n        label: 'Reset Zoom'\n    };\n}\n\nexport namespace ElectronMenus {\n    export const VIEW_WINDOW = [...CommonMenus.VIEW, 'window'];\n    export const VIEW_ZOOM = [...CommonMenus.VIEW, 'zoom'];\n}\n\nexport namespace ElectronMenus {\n    export const HELP_TOGGLE = [...CommonMenus.HELP, 'z_toggle'];\n}\n\n@injectable()\nexport class ElectronMenuContribution implements FrontendApplicationContribution, CommandContribution, MenuContribution, KeybindingContribution {\n\n    constructor(\n        @inject(ElectronMainMenuFactory) protected readonly factory: ElectronMainMenuFactory\n    ) { }\n\n    onStart(app: FrontendApplication): void {\n        const itr = app.shell.children();\n        let child = itr.next();\n        while (child) {\n            // Top panel for the menu contribution is not required for Electron.\n            // TODO: Make sure this is the case on Windows too.\n            if (child.id === 'theia-top-panel') {\n                child.setHidden(true);\n                child = undefined;\n            } else {\n                child = itr.next();\n            }\n        }\n\n        const currentWindow = electron.remote.getCurrentWindow();\n        const createdMenuBar = this.factory.createMenuBar();\n\n        if (isOSX) {\n            electron.remote.Menu.setApplicationMenu(createdMenuBar);\n            currentWindow.on('focus', () =>\n                // OSX: Recreate the menus when changing windows.\n                // OSX only has one menu bar for all windows, so we need to swap\n                // between them as the user switch windows.\n                electron.remote.Menu.setApplicationMenu(this.factory.createMenuBar())\n            );\n\n        } else {\n            // Unix/Windows: Set the per-window menus\n            currentWindow.setMenu(createdMenuBar);\n        }\n    }\n\n    registerCommands(registry: CommandRegistry): void {\n        registry.registerCommand(ElectronCommands.TOGGLE_DEVELOPER_TOOLS, {\n            execute: () => {\n                const webContent = electron.remote.getCurrentWebContents();\n                if (!webContent.isDevToolsOpened()) {\n                    webContent.openDevTools();\n                } else {\n                    webContent.closeDevTools();\n                }\n            }\n        });\n\n        registry.registerCommand(ElectronCommands.RELOAD, {\n            execute: () => {\n                const focusedWindow = electron.remote.getCurrentWindow();\n                if (focusedWindow) {\n                    focusedWindow.reload();\n                }\n            }\n        });\n        registry.registerCommand(ElectronCommands.ZOOM_IN, {\n            execute: () => {\n                const focusedWindow = electron.remote.getCurrentWindow();\n                if (focusedWindow) {\n                    const webContents = focusedWindow.webContents;\n                    webContents.getZoomLevel(zoomLevel =>\n                        webContents.setZoomLevel(zoomLevel + 0.5)\n                    );\n                }\n            }\n        });\n        registry.registerCommand(ElectronCommands.ZOOM_OUT, {\n            execute: () => {\n                const focusedWindow = electron.remote.getCurrentWindow();\n                if (focusedWindow) {\n                    const webContents = focusedWindow.webContents;\n                    webContents.getZoomLevel(zoomLevel =>\n                        webContents.setZoomLevel(zoomLevel - 0.5)\n                    );\n                }\n            }\n        });\n        registry.registerCommand(ElectronCommands.RESET_ZOOM, {\n            execute: () => {\n                const focusedWindow = electron.remote.getCurrentWindow();\n                if (focusedWindow) {\n                    focusedWindow.webContents.setZoomLevel(0);\n                }\n            }\n        });\n    }\n\n    registerKeybindings(registry: KeybindingRegistry): void {\n        registry.registerKeybindings(\n            {\n                command: ElectronCommands.TOGGLE_DEVELOPER_TOOLS.id,\n                keybinding: 'ctrlcmd+alt+i'\n            },\n            {\n                command: ElectronCommands.RELOAD.id,\n                keybinding: 'ctrlcmd+r'\n            },\n            {\n                command: ElectronCommands.ZOOM_IN.id,\n                keybinding: 'ctrlcmd+='\n            },\n            {\n                command: ElectronCommands.ZOOM_OUT.id,\n                keybinding: 'ctrlcmd+-'\n            },\n            {\n                command: ElectronCommands.RESET_ZOOM.id,\n                keybinding: 'ctrlcmd+0'\n            }\n        );\n    }\n\n    registerMenus(registry: MenuModelRegistry) {\n        registry.registerMenuAction(ElectronMenus.HELP_TOGGLE, {\n            commandId: ElectronCommands.TOGGLE_DEVELOPER_TOOLS.id\n        });\n\n        registry.registerMenuAction(ElectronMenus.VIEW_WINDOW, {\n            commandId: ElectronCommands.RELOAD.id,\n            order: 'z0'\n        });\n\n        registry.registerMenuAction(ElectronMenus.VIEW_ZOOM, {\n            commandId: ElectronCommands.ZOOM_IN.id,\n            order: 'z1'\n        });\n        registry.registerMenuAction(ElectronMenus.VIEW_ZOOM, {\n            commandId: ElectronCommands.ZOOM_OUT.id,\n            order: 'z2'\n        });\n        registry.registerMenuAction(ElectronMenus.VIEW_ZOOM, {\n            commandId: ElectronCommands.RESET_ZOOM.id,\n            order: 'z3'\n        });\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule } from 'inversify';\nimport { CommandContribution, MenuContribution } from '../../common';\nimport { FrontendApplicationContribution, ContextMenuRenderer, KeybindingContribution, KeybindingContext } from '../../browser';\nimport { ElectronMainMenuFactory } from './electron-main-menu-factory';\nimport { ElectronContextMenuRenderer } from './electron-context-menu-renderer';\nimport { ElectronMenuContribution } from './electron-menu-contribution';\n\nexport default new ContainerModule(bind => {\n    bind(ElectronMainMenuFactory).toSelf().inSingletonScope();\n    bind(ContextMenuRenderer).to(ElectronContextMenuRenderer).inSingletonScope();\n    bind(KeybindingContext).toConstantValue({\n        id: 'theia.context',\n        isEnabled: true\n    });\n\n    bind(ElectronMenuContribution).toSelf().inSingletonScope();\n    for (const serviceIdentifier of [FrontendApplicationContribution, KeybindingContribution, CommandContribution, MenuContribution]) {\n        bind(serviceIdentifier).toService(ElectronMenuContribution);\n    }\n});\n"],"sourceRoot":""}