{"version":3,"sources":["webpack:///../node_modules/@theia/output/src/browser/output-frontend-module.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;kFAckF;;AAElF,qGAAwD;AACxD,+HAAmE;AACnE,uHAA8E;AAC9E,iJAA2D;AAC3D,yIAAgE;AAChE,qJAAqE;AAErE,kBAAe,IAAI,2BAAe,CAAC,UAAC,IAAqB,EAAE,MAAyB,EAAE,OAA2B,EAAE,MAAyB;IACxI,0CAAqB,CAAC,IAAI,CAAC,CAAC;IAC5B,IAAI,CAAC,4BAAY,CAAC,CAAC,MAAM,EAAE,CAAC;IAC5B,IAAI,CAAC,qCAAoB,CAAC,CAAC,MAAM,EAAE,CAAC,gBAAgB,EAAE,CAAC;IAEvD,IAAI,CAAC,uBAAa,CAAC,CAAC,cAAc,CAAC,iBAAO,IAAI,QAAC;QAC3C,EAAE,EAAE,kCAAkB;QACtB,YAAY,EAAE,cAAM,cAAO,CAAC,SAAS,CAAC,GAAG,CAAe,4BAAY,CAAC,EAAjD,CAAiD;KACxE,CAAC,EAH4C,CAG5C,CAAC,CAAC;IAEJ,8BAAoB,CAAC,IAAI,EAAE,wCAAkB,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC","file":"48.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule, interfaces } from 'inversify';\nimport { OutputWidget, OUTPUT_WIDGET_KIND } from './output-widget';\nimport { WidgetFactory, bindViewContribution } from '@theia/core/lib/browser';\nimport { OutputContribution } from './output-contribution';\nimport { OutputChannelManager } from '../common/output-channel';\nimport { bindOutputPreferences } from '../common/output-preferences';\n\nexport default new ContainerModule((bind: interfaces.Bind, unbind: interfaces.Unbind, isBound: interfaces.IsBound, rebind: interfaces.Rebind) => {\n    bindOutputPreferences(bind);\n    bind(OutputWidget).toSelf();\n    bind(OutputChannelManager).toSelf().inSingletonScope();\n\n    bind(WidgetFactory).toDynamicValue(context => ({\n        id: OUTPUT_WIDGET_KIND,\n        createWidget: () => context.container.get<OutputWidget>(OutputWidget)\n    }));\n\n    bindViewContribution(bind, OutputContribution);\n});\n"],"sourceRoot":""}