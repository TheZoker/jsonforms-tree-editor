{"version":3,"sources":["webpack:///../node_modules/@theia/filesystem/src/browser/file-resource.ts"],"names":[],"mappings":"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","file":"2.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport { TextDocumentContentChangeEvent } from 'vscode-languageserver-types';\nimport {\n    Resource, ResourceResolver, Emitter, Event, DisposableCollection, ResourceError\n} from '@theia/core';\nimport URI from '@theia/core/lib/common/uri';\nimport { FileSystem, FileStat, FileSystemError } from '../common/filesystem';\nimport { FileSystemWatcher, FileChangeEvent } from './filesystem-watcher';\n\nexport class FileResource implements Resource {\n\n    protected readonly toDispose = new DisposableCollection();\n    protected readonly onDidChangeContentsEmitter = new Emitter<void>();\n    readonly onDidChangeContents: Event<void> = this.onDidChangeContentsEmitter.event;\n\n    protected stat: FileStat | undefined;\n    protected uriString: string;\n\n    constructor(\n        readonly uri: URI,\n        protected readonly fileSystem: FileSystem,\n        protected readonly fileSystemWatcher: FileSystemWatcher\n    ) {\n        this.uriString = this.uri.toString();\n        this.toDispose.push(this.onDidChangeContentsEmitter);\n    }\n\n    async init(): Promise<void> {\n        const stat = await this.getFileStat();\n        if (stat && stat.isDirectory) {\n            throw new Error('The given uri is a directory: ' + this.uriString);\n        }\n        this.stat = stat;\n\n        this.toDispose.push(this.fileSystemWatcher.onFilesChanged(event => {\n            if (FileChangeEvent.isAffected(event, this.uri)) {\n                this.sync();\n            }\n        }));\n        try {\n            this.toDispose.push(await this.fileSystemWatcher.watchFileChanges(this.uri));\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    async readContents(options?: { encoding?: string }): Promise<string> {\n        try {\n            const { stat, content } = await this.fileSystem.resolveContent(this.uriString, options);\n            this.stat = stat;\n            return content;\n        } catch (e) {\n            if (FileSystemError.FileNotFound.is(e)) {\n                this.stat = undefined;\n                throw ResourceError.NotFound({\n                    ...e.toJson(),\n                    data: {\n                        uri: this.uri\n                    }\n                });\n            }\n            throw e;\n        }\n    }\n\n    async saveContents(content: string, options?: { encoding?: string }): Promise<void> {\n        this.stat = await this.doSaveContents(content, options);\n    }\n    protected async doSaveContents(content: string, options?: { encoding?: string }): Promise<FileStat> {\n        const stat = await this.getFileStat();\n        if (stat) {\n            return this.fileSystem.setContent(stat, content, options);\n        }\n        return this.fileSystem.createFile(this.uriString, { content, ...options });\n    }\n\n    async saveContentChanges(changes: TextDocumentContentChangeEvent[], options?: { encoding?: string }): Promise<void> {\n        if (!this.stat) {\n            throw new Error(this.uriString + ' has not been read yet');\n        }\n        this.stat = await this.fileSystem.updateContent(this.stat, changes, options);\n    }\n\n    protected async sync(): Promise<void> {\n        if (await this.isInSync(this.stat)) {\n            return;\n        }\n        this.onDidChangeContentsEmitter.fire(undefined);\n    }\n    protected async isInSync(current: FileStat | undefined): Promise<boolean> {\n        const stat = await this.getFileStat();\n        if (!current) {\n            return !stat;\n        }\n        return !!stat && current.lastModification >= stat.lastModification;\n    }\n\n    protected async getFileStat(): Promise<FileStat | undefined> {\n        if (!this.fileSystem.exists(this.uriString)) {\n            return undefined;\n        }\n        try {\n            return this.fileSystem.getFileStat(this.uriString);\n        } catch {\n            return undefined;\n        }\n    }\n\n}\n\n@injectable()\nexport class FileResourceResolver implements ResourceResolver {\n\n    @inject(FileSystem)\n    protected readonly fileSystem: FileSystem;\n\n    @inject(FileSystemWatcher)\n    protected readonly fileSystemWatcher: FileSystemWatcher;\n\n    async resolve(uri: URI): Promise<FileResource> {\n        if (uri.scheme !== 'file') {\n            throw new Error('The given uri is not file uri: ' + uri);\n        }\n        const resource = new FileResource(uri, this.fileSystem, this.fileSystemWatcher);\n        await resource.init();\n        return resource;\n    }\n\n}\n"],"sourceRoot":""}